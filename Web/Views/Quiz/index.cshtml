@model Web.Models.Quiz
@{
    ViewBag.Title = "Quiz";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section stylesheet {
    <style type="text/css">
        .table-responsive {
            overflow-x: auto;
        }
    </style>
}
<section class="content-header">
    <h1>
        Manage Quizzes
    </h1>
</section>
<section class="content">
    <script type="text/javascript">
        $(document).ready(function () {
            $(".btnDownload").click(function () {
                var format = $(this).attr("data-download-format");
                switch (format) {
                    case "XLS":
                        $("#format").val("@Web.Controllers.HomeController.DownloadFormat.XLS");
                        break;
                    case "XML":
                        $("#format").val("@Web.Controllers.HomeController.DownloadFormat.XML");
                        break;
                    case "CSV":
                        $("#format").val("@Web.Controllers.HomeController.DownloadFormat.CSV");
                        break;
                    default:
                        break;
                }
                var data = JSON.stringify($('#example').dataTable().fnGetData());
                $("#gridData").val(data);
                $("#frmDownload").submit();
            });
        });
    </script>
    <form action="@Url.Action("downloadgriddata", "home")" id="frmDownload" method="post">
        <input type="hidden" name="gridData" id="gridData" value="" />
        <input type="hidden" name="format" id="format" value="@Web.Controllers.HomeController.DownloadFormat.XLS" />
        <button class="btn btn-primary btnDownload btn-flat btn-sm bg-blue" role="button" data-download-format="XML"><i class="fa fa-download"></i>&nbsp;&nbsp;&nbsp;Export Xml</button>
        <button class="btn btn-primary btnDownload btn-flat btn-sm bg-green" role="button" data-download-format="XLS"><i class="fa fa-file-excel-o"></i>&nbsp;&nbsp;&nbsp;Export Excel</button>
        <button class="btn btn-primary btnDownload btn-flat btn-sm bg-olive" role="button" data-download-format="CSV"><i class="fa fa-download"></i>&nbsp;&nbsp;&nbsp;Export Csv</button>
    </form>
    <div class="row">
        <div class="col-xs-12">
            <div class="box">
                <div class="box-body table-responsive">
                    <div class="input-group margin" style="margin-left:0px;">
                        <input id="txt-search-query" type="text" class="form-control">
                        <span class="input-group-btn">
                            <button id="btn-refresh" class="btn btn-primary btn-flat" type="button"><i class="fa fa-refresh"></i></button>
                            <button id="btn-search" class="btn btn-primary btn-flat" type="button"><i class="fa fa-search"></i>&nbsp;&nbsp;FIND</button>
                        </span>
                        <input type="button" id="btn-open-modal" data-toggle="modal" data-target="#add-new-modal" value="" style="display:none;" />
                        <button id="btn-add-new" class="btn btn-primary btn-flat" style="float: right;"><i class="fa fa-plus"></i>&nbsp;&nbsp;ADD NEW Quiz</button>
                    </div>
                    <table id="example" class="table table-bordered table-hover dataTable" cellspacing="0" width="100%">
                        <thead>
                            <tr>
                                @*<th>ID</th>
                                    <th>CompanyID</th>*@
                                <th>Title</th>
                                <th>Code</th>
                                <th>Desciption</th>
                                @*<th>QuestionDbFile</th>*@
                                <th>OtherDetails</th>
                                @*<th>CreationDate</th>
                                    <th>CreationTime</th>
                                    <th>ModificationDate</th>
                                    <th>CreatedBy</th>
                                    <th>ModifiedBy</th>
                                    <th>ModificationTime</th>*@
                                <th>Available From</th>
                                <th>Available Until</th>
                                @*<th>TimeLimit</th>
                                    <th>CorrectAnswerMarks</th>
                                    <th>NegativeMarking</th>
                                    <th>PassingPercentage</th>
                                    <th>ShuffleQuestions</th>
                                    <th>ShuffleOptions</th>
                                    <th>ShowReportAfterTest</th>
                                    <th>RevealCorrectOptionAfterTest</th>
                                    <th>AllowMultipleAttempts</th>
                                    <th>PreventWindowAndTabChange</th>*@
                                <th>Questions</th>
                                <th>Is Active</th>

                                <th>Action</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>
@{
    var data = new List<Web.Helper.GridHelper>();
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "ID" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "CompanyID" });
    data.Add(new Web.Helper.GridHelper() { ColumnName = "Title" });
    data.Add(new Web.Helper.GridHelper() { ColumnName = "Code" });
    data.Add(new Web.Helper.GridHelper() { ColumnName = "Desciption", ColumnHeader = "Sections" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "QuestionDbFile" });
    data.Add(new Web.Helper.GridHelper() { ColumnName = "OtherDetails" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "CreationDate" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "CreationTime" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "ModificationDate" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "CreatedBy" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "ModifiedBy" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "ModificationTime" });
    data.Add(new Web.Helper.GridHelper() { ColumnName = "AvailableFromDate", ColumnHeader = "Available From" });
    data.Add(new Web.Helper.GridHelper() { ColumnName = "AvailableToDate", ColumnHeader = "Available Until" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "TimeLimit" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "CorrectAnswerMarks" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "NegativeMarking" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "PassingPercentage" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "ShuffleQuestions" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "ShuffleOptions" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "ShowReportAfterTest" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "RevealCorrectOptionAfterTest" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "AllowMultipleAttempts" });
    //data.Add(new Web.Helper.GridHelper() { ColumnName = "PreventWindowAndTabChange" });
    data.Add(new Web.Helper.GridHelper() { ColumnName = "Questions", ColumnHeader = "Questions", ColumnType = Web.Helper.GridColumnType.Submit, SubmitModel = new Web.Helper.GridColumnTypeSubmitModel() { ButtonText = "Questions", HiddenName = "id", HiddenValue = "", PostUrl = "__G_QUESTIONS_INDEX_URL" } });
    data.Add(new Web.Helper.GridHelper() { ColumnName = "IsActive", ColumnHeader = "Is Active" });

    var modelData = new Web.Helper.GridModelData(new Tuple<IEnumerable<Web.Helper.GridHelper>, String>(data, "Quiz"));
}
@section scripts {
    <script type="text/javascript">
        Sys.Application.add_init(appInit);
        function appInit() {
            $create(AjaxControlToolkit.CalendarBehavior, { "format": "yyyyMMdd" }, null, null, $get('AvailableFromDate'));
            $create(AjaxControlToolkit.CalendarBehavior, { "format": "yyyyMMdd" }, null, null, $get('AvailableToDate'));
        }
    </script>
    <script type="text/javascript">
        var __G_QUESTIONS_INDEX_URL = "@Url.Action("index","question")";
        function fnClearForm() {
            $('#ID').val('');
            $('#CompanyID').val('');
            $('#Title').val('');
            $('#Code').val('');
            $('#Desciption').val('');
            $('#QuestionDbFile').val('');
            $('#OtherDetails').val('');
            $('#CreationDate').val('');
            $('#CreationTime').val('');
            $('#ModificationDate').val('');
            $('#CreatedBy').val('');
            $('#ModifiedBy').val('');
            $('#ModificationTime').val('');
            $('#IsActive').prop("checked", false);
            $('#AvailableFromDate').val('');
            $('#AvailableToDate').val('');
            $('#TimeLimit').val('');
            $('#CorrectAnswerMarks').val('');
            $('#NegativeMarking').val('');
            $('#PassingPercentage').val('');
            $('#ShuffleQuestions').prop("checked", false);
            $('#ShuffleOptions').prop("checked", false);
            $('#ShowReportAfterTest').prop("checked", false);
            $('#RevealCorrectOptionAfterTest').prop("checked", false);
            $('#AllowMultipleAttempts').prop("checked", false);
            $('#PreventWindowAndTabChange').prop("checked", false);
            $('#HindiEnabled').prop("checked", false);
            $('#IsOnlyInClass').prop("checked", false);
            $('#IsPublished').prop("checked", false);
            $('#Otp').val('');

        }
        function fnSetupForm(obj) {
            $('#ID').val(obj.ID);
            $('#CompanyID').val(obj.CompanyID);
            $('#Title').val(obj.Title);
            $('#Code').val(obj.Code);
            $('#Desciption').val(obj.Desciption);
            $('#QuestionDbFile').val(obj.QuestionDbFile);
            $('#OtherDetails').val(obj.OtherDetails);
            $('#CreationDate').val(obj.CreationDate);
            $('#CreationTime').val(obj.CreationTime);
            $('#ModificationDate').val(obj.ModificationDate);
            $('#CreatedBy').val(obj.CreatedBy);
            $('#ModifiedBy').val(obj.ModifiedBy);
            $('#ModificationTime').val(obj.ModificationTime);
            if (obj.IsActive == true) {
                $('#IsActive').prop("checked", true);
            }
            if (obj.HindiEnabled == true) {
                $('#HindiEnabled').prop("checked", true);
            }
            if (obj.IsOnlyInClass == true) {
                $('#IsOnlyInClass').prop("checked", true);
            }
            $('#AvailableFromDate').val(obj.AvailableFromDate);
            $('#AvailableToDate').val(obj.AvailableToDate);
            $('#TimeLimit').val(obj.TimeLimit);
            $('#CorrectAnswerMarks').val(obj.CorrectAnswerMarks);
            $('#NegativeMarking').val(obj.NegativeMarking);
            $('#PassingPercentage').val(obj.PassingPercentage);
            if (obj.ShuffleQuestions == true) {
                $('#ShuffleQuestions').prop("checked", true);
            }
            if (obj.ShuffleOptions == true) {
                $('#ShuffleOptions').prop("checked", true);
            }
            if (obj.ShowReportAfterTest == true) {
                $('#ShowReportAfterTest').prop("checked", true);
            }
            if (obj.RevealCorrectOptionAfterTest == true) {
                $('#RevealCorrectOptionAfterTest').prop("checked", true);
            }
            if (obj.AllowMultipleAttempts == true) {
                $('#AllowMultipleAttempts').prop("checked", true);
            }
            if (obj.PreventWindowAndTabChange == true) {
                $('#PreventWindowAndTabChange').prop("checked", true);
            }
            $('#Otp').val(obj.Otp);
            if (obj.IsPublished == true) {
                $('#IsPublished').prop("checked", true);
            }
        }
        function fnSubmit() {
            $("#frm-add-edit-form").submit();
        }

        function fnGetOpt() {
            $.get("@Url.Action("captcha", "home")", function (data, status, xhr) {
                $("#Otp").val(data);
            });
        }
    </script>
    @Html.Partial("~/Views/_CrudGridJs.cshtml", modelData)
}
<div class="modal fade" id="add-new-modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="width:800px;">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="model-title-h4" add-title="Add New Quiz" edit-title="Modify Selected Quiz"><i class="fa fa-plus"></i>&nbsp;&nbsp;&nbsp;Add New Quiz</h4>
            </div>
            <form action="#" method="post" class="box" id="frm-add-edit-form">
                <input type="hidden" name="ID" id="ID" value="" />
                <input type="hidden" name="CompanyID" id="CompanyID" value="" />
                <input type="hidden" name="QuestionDbFile" id="QuestionDbFile" value="" />
                <input type="hidden" name="CreationDate" id="CreationDate" value="" />
                <input type="hidden" name="CreationTime" id="CreationTime" value="" />
                <input type="hidden" name="ModificationDate" id="ModificationDate" value="" />
                <input type="hidden" name="CreatedBy" id="CreatedBy" value="" />
                <input type="hidden" name="ModifiedBy" id="ModifiedBy" value="" />
                <input type="hidden" name="ModificationTime" id="ModificationTime" value="" />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="Title">Title @Html.ValidationMessageFor(P => P.Title)</label>
                                @Html.TextBoxFor(P => P.Title, new { @class = "form-control", placeholder = "Title" })
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="Code">Code @Html.ValidationMessageFor(P => P.Code)</label>
                                @Html.TextBoxFor(P => P.Code, new { @class = "form-control", placeholder = "Code" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="AvailableFromDate">Available From(YYYYMMDD) @Html.ValidationMessageFor(P => P.AvailableFromDate)</label>
                                @Html.TextBoxFor(P => P.AvailableFromDate, new { @class = "form-control", placeholder = "Available From" })
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="AvailableToDate">Available Until(YYYYMMDD) @Html.ValidationMessageFor(P => P.AvailableToDate)</label>
                                @Html.TextBoxFor(P => P.AvailableToDate, new { @class = "form-control", placeholder = "Available Until" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="TimeLimit">Time Limit @Html.ValidationMessageFor(P => P.TimeLimit)</label>
                                @Html.TextBoxFor(P => P.TimeLimit, new { @class = "form-control", placeholder = "Time Limit" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="CorrectAnswerMarks">Correct Answer Marks @Html.ValidationMessageFor(P => P.CorrectAnswerMarks)</label>
                                @Html.TextBoxFor(P => P.CorrectAnswerMarks, new { @class = "form-control", placeholder = "Correct Answer Marks" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="NegativeMarking">Negative Marking @Html.ValidationMessageFor(P => P.NegativeMarking)</label>
                                @Html.TextBoxFor(P => P.NegativeMarking, new { @class = "form-control", placeholder = "Negative Marking" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="PassingPercentage">Passing Percentage @Html.ValidationMessageFor(P => P.PassingPercentage)</label>
                                @Html.TextBoxFor(P => P.PassingPercentage, new { @class = "form-control", placeholder = "Passing Percentage" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.ShuffleQuestions, new { @class = "" })<label for="ShuffleQuestions">Shuffle Questions? @Html.ValidationMessageFor(P => P.ShuffleQuestions)</label>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.ShuffleOptions)<label for="ShuffleOptions">Shuffle Options? @Html.ValidationMessageFor(P => P.ShuffleOptions)</label>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.ShowReportAfterTest)<label for="ShowReportAfterTest">Show Report After Test? @Html.ValidationMessageFor(P => P.ShowReportAfterTest)</label>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-4">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.RevealCorrectOptionAfterTest)<label for="RevealCorrectOptionAfterTest">Reveal Correct Option After Test? @Html.ValidationMessageFor(P => P.RevealCorrectOptionAfterTest)</label>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.AllowMultipleAttempts)<label for="AllowMultipleAttempts">Allow Multiple Attempts? @Html.ValidationMessageFor(P => P.AllowMultipleAttempts)</label>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.PreventWindowAndTabChange)<label for="PreventWindowAndTabChange">Prevent Window & Tab Change? @Html.ValidationMessageFor(P => P.PreventWindowAndTabChange)</label>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label for="Desciption">Question Sections<sup class="superscript">(comma separated i.e. English,Apptitute etc)</sup> @Html.ValidationMessageFor(P => P.Desciption)</label>
                                @Html.TextBoxFor(P => P.Desciption, new { @class = "form-control", placeholder = "Desciption" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label for="OtherDetails">Other Details @Html.ValidationMessageFor(P => P.OtherDetails)</label>
                                @Html.TextAreaFor(P => P.OtherDetails, new { @class = "form-control", placeholder = "Other Details" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.IsActive, new { @class = "" })<label for="IsActive">Is Active? @Html.ValidationMessageFor(P => P.IsActive)</label>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.HindiEnabled, new { @class = "" })<label for="HindiEnabled">Hindi Enabled? @Html.ValidationMessageFor(P => P.HindiEnabled)</label>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.IsOnlyInClass, new { @class = "" })<label for="IsOnlyInClass">Is Only In-Class Exam? @Html.ValidationMessageFor(P => P.IsOnlyInClass)</label>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.CheckBoxFor(P => P.IsPublished, new { @class = "" })<label for="IsPublished">Is Published? @Html.ValidationMessageFor(P => P.IsPublished)</label>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label for="Otp">OTP @Html.ValidationMessageFor(P => P.Otp)<a href="javascript:fnGetOpt();">Generate</a></label>
                                @Html.TextBoxFor(P => P.Otp, new { @class = "form-control", placeholder = "OTP" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default btn-flat fa fa-close" data-dismiss="modal">&nbsp;&nbsp;&nbsp;Close</button>
                    <button type="button" class="btn btn-primary btn-flat fa fa-save" onclick="fnSubmit();">&nbsp;&nbsp;&nbsp;Save changes</button>
                </div>
                <div class="overlay"></div>
                <div class="loading-img"></div>
            </form>
        </div>
    </div>
</div>
